#!/usr/bin/env python3

import os
import re
import subprocess
from functools import reduce

def read(file_path):
    file    = open(file_path, "r")
    content = file.read()
    file.close()
    return content

def syscall(args):
    return subprocess.run(args, stdout=subprocess.PIPE) \
              .stdout                                   \
              .decode('utf-8')                          \
              .split('\n')

files    = syscall(["git", "diff", "feature/huubhr-re-arch", "--name-only"])
allfiles = [x for x in syscall(["git", "ls-files"]) if x.endswith(".groovy")]
diffs = syscall(["git", "diff", "feature/huubhr-re-arch"])

file_contents    = [[x, read(x).split('\n')] for x in files if x != '']
diff_contents    = ([x for x in diffs if x != '' and x.startswith('+') and not x.startswith('++')])
allfile_contents = '\n'.join([read(x) for x in allfiles if x != ''])

file_content_str = ['\n'.join(x[1]) for x in file_contents]

def warn(path, i, msg, line):
    print('{}:{} {}: {}'.format(path, i, msg, line))

for path, content in file_contents:
    path = os.path.basename(path)
    i = 1 
    for line in content:
        if ("print" in line):
            warn(path, i, 'println detected', line)
        if (re.search("def\s+[^\s]+\(", line)):
            funcname = line.split("(")[0]\
                           .replace("def ", "")\
                           .replace("private", "")\
                           .replace("public", "")\
                           .replace(" ", "")
            if(funcname not in allfile_contents):
                warn(path, i, 'method {} not used'.format(funcname), line)

        i = i + 1
